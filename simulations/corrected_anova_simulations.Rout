
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

[Área de trabalho anterior carregada]

> ## simulations_rightful_conclusions
> 
> ## Codes of the simulations, as ran to generate the results in the paper
> 
> ## Simulations for each test design creates a parallel virtual cluster, run the simulations and close the cluster.
> ## This made the code a bit redundant, but also allows to run any simulation independently.
> ## Please refer to documentation of 'parallel' to tune the use in your computer
> 
> source("functions.R")
Carregando pacotes exigidos: stats4
Carregando pacotes exigidos: Hmisc
Carregando pacotes exigidos: lattice
Carregando pacotes exigidos: survival
Carregando pacotes exigidos: Formula
Carregando pacotes exigidos: ggplot2
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

> library(parallel)
> 
> 
> ################################################################################
> ## ANOVA simulations
> ################################################################################
> ## Hypercube sampling (see introductory vignette of pse package)
> ## Number of hypercube samples
> nsampH <- 2000
> ## Number of replicate simulations for each parameter sample in the hypercube
> nrepl <- 1e4
> ## Variables to be sampled: standard effect (as tvalues), standandard error of marginal distributions, sample size
> factors <- c("D", "SD", "N")
> ## Discrete uniform random deviates function, to sample discrete
> ## sample sizes
> qdunif<-function(p, min, max) floor(qunif(p, min, max))
> ## Distributions to sample the variables; all uniform in this case
> q <- c("qunif", "qunif", "qdunif")
> ## Arguments of each distribution (min and max values of the uniform distributions)
> q.arg <- list(list(min=0.1, max=8), list(min=0.1, max=8), list(min=10, max=100))
> ## Accessory function for a single run with a combination of parameters
> modelRun <- function (my.data) {
+     return(mapply(sim.averages, my.data[,1], my.data[,2], my.data[,3],
+                   MoreArgs = list(nrep = nrepl, function.name="wp.anova")))
+ }
> ## Hypercube sample of nsamp combinations of parameters
> ## Start cluster (set the file mpd.hosts with the desired number of
> ## cores and processes, see pse:machinefile)
> ## cl <- makePSOCKcluster(machinefile("../mpd.hosts"))
> cl <- makePSOCKcluster(machinefile("mpd.hosts"))
> ## Export needed functions
> ##clusterEvalQ(cl, source("functions.R"))
> clusterExport(cl, c("nrepl", "AICc", "wp.anova", "sim.averages"))
> ## Run the simulations 
> myLHS3 <- LHS(modelRun, factors, nsampH, q, q.arg, cl=cl)
> ## dataframe with parameter values and results
> anova2.results <- cbind(get.data(myLHS3),  get.results(myLHS3))
> names(anova2.results)[4:16] <- c("p.NHT.right", "p.AIC.right", "p.AIC.right.2", "p.mismatch", "p.mismatch.2", "mean.NHT.M",
+                                 "mean.AIC.M", "mean.AIC.M.2", "p.NHT.S",  "p.AIC.S", "p.AIC.S.2", "mean.pvalue", "mean.wH0")
> 
> ## H0 is true ##
> ## Variables to be sampled: standard effect (as tvalues), standandard error of marginal distributions, sample size
> factors <- c("SD", "N")
> ## Discrete uniform random deviates function, to sample discrete
> ## sample sizes
> qdunif<-function(p, min, max) floor(qunif(p, min, max))
> ## Distributions to sample the variables; all uniform in this case
> q <- c("qunif", "qdunif")
> ## Arguments of each distribution (min and max values of the uniform distributions)
> q.arg <- list(list(min=0.1, max=8), list(min=10, max=100))
> ## Accessory function for a single run with a combination of parameters
> modelRun <- function (my.data) {
+     return(mapply(sim.averages.null, my.data[,1], my.data[,2],
+                   MoreArgs = list(nrep = nrepl, function.name="wp.anova")))
+ }
> ##
> clusterExport(cl, c("sim.averages.null"))
> ## Run the simulations 
> myLHS30 <- LHS(modelRun, factors, nsampH, q, q.arg, cl=cl)
> ## dataframe with parameter values and results
> anova2.results0 <- cbind(get.data(myLHS30),  get.results(myLHS30))
> names(anova2.results0)[3:15] <- c("p.NHT.right", "p.AIC.right", "p.AIC.right.2", "p.mismatch", "p.mismatch.2", "mean.NHT.M",
+                                 "mean.AIC.M", "mean.AIC.M.2", "p.NHT.S",  "p.AIC.S", "p.AIC.S.2", "mean.pvalue", "mean.wH0")
> save.image()
> save(anova2.results, anova2.results0, file="anova2results.RData")
> stopCluster(cl)
> 
> 
> proc.time()
  usuário   sistema decorrido 
   88.711     0.131 96635.814 
